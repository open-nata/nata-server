'use strict'

/*创建一个express app的实例

* 连接mongodb数据库*/
const mongoose = require('../mongodb');
mongoose();

const net = require('net');
const WebSocketServer = require('ws').Server;

/*Express app 实例*/
const app = require('../app');

const debug = require('debug')('server:server');
const http = require('http');

const port = 8080;
app.set('port',port);

const server = http.createServer(app);

/*建立一个websocket对象，用于minicap的信息传输*/
const wss = new WebSocketServer({server:server});

wss.on('connection',(ws)=>{
    const stream = net.connect({
        port:1717
    })

    stream.on('error',()=>{
        console.error('Be sure to run `adb forward tcp:1717 localabstract:minicap`')
    })

    let readBannerBytes = 0
    let bannerLength = 2
    let readFrameBytes = 0
    let frameBodyLength = 0
    let frameBody = new Buffer(0)
    const banner = {
        version: 0,
        length: 0,
        pid: 0,
        realWidth: 0,
        realHeight: 0,
        virtualWidth: 0,
        virtualHeight: 0,
        orientation: 0,
        quirks: 0,
    }

    function tryRead() {
        for (let chunk; (chunk = stream.read());) {
            for (let cursor = 0, len = chunk.length; cursor < len;) {
                if (readBannerBytes < bannerLength) {
                    switch (readBannerBytes) {
                        case 0:
                            // version
                            banner.version = chunk[cursor]
                            break
                        case 1:
                            // length
                            banner.length = bannerLength = chunk[cursor]
                            break
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                            // pid
                            banner.pid +=
                                (chunk[cursor] << ((readBannerBytes - 2) * 8)) >>> 0
                            break
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                            // real width
                            banner.realWidth +=
                                (chunk[cursor] << ((readBannerBytes - 6) * 8)) >>> 0
                            break
                        case 10:
                        case 11:
                        case 12:
                        case 13:
                            // real height
                            banner.realHeight +=
                                (chunk[cursor] << ((readBannerBytes - 10) * 8)) >>> 0
                            break
                        case 14:
                        case 15:
                        case 16:
                        case 17:
                            // virtual width
                            banner.virtualWidth +=
                                (chunk[cursor] << ((readBannerBytes - 14) * 8)) >>> 0
                            break
                        case 18:
                        case 19:
                        case 20:
                        case 21:
                            // virtual height
                            banner.virtualHeight +=
                                (chunk[cursor] << ((readBannerBytes - 18) * 8)) >>> 0
                            break
                        case 22:
                            // orientation
                            banner.orientation += chunk[cursor] * 90
                            break
                        case 23:
                            // quirks
                            banner.quirks = chunk[cursor]
                            break
                    }

                    cursor += 1
                    readBannerBytes += 1
                } else if (readFrameBytes < 4) {
                    frameBodyLength += (chunk[cursor] << (readFrameBytes * 8)) >>> 0
                    cursor += 1
                    readFrameBytes += 1
                } else {
                    if (len - cursor >= frameBodyLength) {
                        frameBody = Buffer.concat([
                            frameBody, chunk.slice(cursor, cursor + frameBodyLength),
                        ])

                        // Sanity check for JPG header, only here for debugging purposes.
                        if (frameBody[0] !== 0xFF || frameBody[1] !== 0xD8) {
                            console.error(
                                'Frame body does not start with JPG header', frameBody)
                            process.exit(1)
                        }

                        try {
                            ws.send(frameBody, {
                                binary: true,
                            })
                        } catch (e) { /* handle error */
                            console.log(e.message)
                        }


                        cursor += frameBodyLength
                        frameBodyLength = readFrameBytes = 0
                        frameBody = new Buffer(0)
                    } else {
                        frameBody = Buffer.concat([
                            frameBody, chunk.slice(cursor, len),
                        ])

                        frameBodyLength -= len - cursor
                        readFrameBytes += len - cursor
                        cursor = len
                    }
                }
            }
        }
    }

    stream.on('readable', tryRead)

    ws.on('close', () => {
        console.info('Lost a client')
        stream.end()
    })
})

server.listen(port);